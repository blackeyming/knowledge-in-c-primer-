1. 共用体：能同时存储不同的数据类型（只能是int, long 或 double），但是只能同时存储其中的一种类型。长度为其最大的成员长度
  union one4all
  {
    int int_val;
    double double_val;
    long long_val;
  };
  one4all lei;
  lei.int_val=1;
  cout<<lei.int_val;
2.结构体：结构体可以同时存储int, long 和double； 
3.枚举： 可以替代const创建符号常量，
 enum color{red, yellow, green, black,white};
 color mycolor=red;
       可以用赋值来显式设置枚举量的值
       enum bits{one=1, two=2};
4.数组的静态联编和静态联编： int a[100]  &&　　 int size; cin>>size; int * a=new int [size];
5.使用new创建动态结构：
  inflatable * ps=new inflatable;
6.数组的替代品：
   vector模板类：类似于string 类， 也是一种动态数组；#include<vector>  vector<int> a[4];
   array模板类：长度固定数组，比vector类效率高，C++11才支持; #include<array> std::array<int ,4> a={3,2,34,4}; 可以允许a[-2];
7. 类型别名： typedef typename aliasname; 一个类型可以同时创建多个别名。
8. 循环文本输入：
   cin： 只有按下enter键后，字符才会被送到输入流中，这导致可以再输入结束符之后输入其他字符，只是没有存入而已
   cin.get(ch)：读取输入中的下一个字符（包括空格）,赋给ch,
   char ch;
   char * data;
   unsigned int i=0;
   data=new char[100];
   cin.get(ch);
   while(ch!='\n')
   {
    *data+i=ch;
    i++;
    cin.get(ch);
   }
  9. EOF结束输入：
  cin.get(ch);
   while(!cin.fail())// while(cin)// while(ch!=EOF)
   {
   ...
   cin.get(ch);
   }
   
  10. 字符函数库：cctype;#include<cctype>;
      isalpha(ch) ：检查ch是否为字符： 因为and/or格式假设输入的字符编码都是连续的，其他的字符都不在这个范围内，这种
  假设对ascll代码是成立的，但通常并不成立
      isdigits(ch)：检查ch是否为数字字符;
      isspace(ch)：检查是否为空白，如换行符，空格和制表符；
      ispunct(ch)：测试字符是否为标点符号。
  11. 读取数字的循环：
      const int max=5;
      int golf[max];
      int i;
      for (i=0;i<max;i++)
      {
        while(!(cin>>golf[i])) 
        {
          cin.clear(); //输入结束符时候清除流中的数据
          while(cin.get()!='\n') //按下enter键才重新输入
          continue;
        }
      }
12. 读取文本文件:
    #include<fstream>
    #include<cstdlib>// support for exit()
    ifstream infile;
    infile.open(filename);
    if(!infile.is_open())
    {
      cout<<"can't open the file, program terminating \n";
      exit(EXIT_FALURE);
    }
    double value;
    double sum=0.0;
    int count=0;
    infile>>value;
    while(infile.good())// while input good and not at EOF;
   {
    count++;
    sum+=value;
    infile>>value; // get next value;
    // 也可以用infile.getline(value);
   }
   
   if (infile.eof())
   {
    cout<<"End of file reached"<<endl; 
  }
  else if (infile.fail())
  {
    cout<<"Input terminated by data mismatch"<<endl;
  }
  else 
    cout<<"Input terminated for unknown reason"<<endl;
  if (count==0)
  {
    cout<<"no data processed"<<endl;
  }
  infile.close(); // infile.open() 与 infile.close()配套使用

13. 函数原型： 描述函数到编译器的接口，将函数的返回值，以及参数的类型和数量告诉编译器；
14.构思程序时将存储属性和操作结合起来朝着OOP思想迈进。
15.尽可能使用const：可以避免由于无意间修改数据而导致的编程错误
                    可以使得函数能够处理const和非const实参，否则就只能接受非const数据。
16. c-风格字符串：与char数组的区别在于自带空字符结束符，如“aga”;
17. 递归：函数自己调用自己，c可以main()递归，c++不允许；
18. 函数指针：类似于数据项，函数也是有地址的，是存储其机器代码的内存的开始地址，将函数的地址作为参数传给另一个函数，
    这样允许在不同的时间传递不同函数的地址，在不同的时间使用不同的函数，比直接调用灵活。只需修改函数地址就可以了。
    函数名就是函数的地址，声明函数指针，需要指明函数返回值和参数列表如：
    int fun(int); 
    int （* pf）(int); pf=fun;
    (*pf)(4);  // or pf(4);
19. 自动推断类型功能：auto pf=functionname; c++11支持；
20. 函数数组指针： * pf[3]; [] 优先级大于* 函数指针数组：(*pf)[3];
21. 使用typedef简化函数指针的定义：
    typedef const double *(*p_fun) (const double *, int);
    p_fun p1=f1;
22. 内联函数：常规函数调用是使得程序跳到另一个地址（函数的地址）中，内联函数是将程序嵌入到调用的地方，需要更多的内存
    通常省略原型， 直接定义,如： inline double add(double x, double y){return x+y;} 按值传递，比宏定义要高。
23. 宏定义：#define SQUARE(x) x*x; 如果是SQUARE(i++); 则i将递增两次，而内联函数则是一次。
24. 引用变量：主要用途是用作函数的形参（数据比较大时），函数将使用原始数据而不是其副本，如 int a; int &same=a; 
              这里&不是地址运算符，而是类型标识的一部分，就像char * 中的*一样。
25. 左值引用：左值：指那些能够通过访问地址来修改其值的变量， 非左值：字面常量，由引号括起的字符串除外，因为它们由地址表示
    后面有右值引用，c++11支持，使用&&申明，
    double &&rref=std::sqrt(36.00); //这用左值引用是行不通的
    std::cout<<rref<<endl;
    右值引用使得操作更有效实现，可以实现移动语义；
26. 函数中不可以返回临时变量的引用，因为临时变量的作用域只是限于函数内部。
27. 默认参数：必须在函数的参数列表中从右到左添加默认值
28. 函数重载：将非const值赋给const值是合法的，但是反之就是非法的。有时候可以通过默认参数来减少函数重载
29. 重载引用参数：类设计和STL经常使用引用参数：
    void staff(double &rs1);
    void staff(const double &rs2);
    void staff(double &&r3);
    dobule x=55.5;
    const double y=32.5;
    staff(x); // call staff(double & rs1);
    staff(y); //call staff(const double &rs2)
    staff(x+y); // call staff(double &&rs3);
30. 函数模板：使用泛型来定义函数，其中的泛型可以用具体的类型来替代。也被称为通用编程，模板特性也称为参数化类型
  template<class/typename Type>
  void swap(Type &a, Type &b)
  {
    Type temp;
    temp=a;
    a=b;
    b=temp;
  }
  原型的申明规则跟一般函数一样，只是多了一个template<class Type>在前面。
31. 重载模板： 像重载常规函数定义那样.参数列表变了。参数不一定都要是泛型的。如：
    template<class Type>
    void swap(Type &a, Type &b){}
    template<class Type>
    void swap(Type &a, Type &b,int n){}
32. 模板的局限性：
    （1）若模板函数定义了赋值=，但是Type为数组类型，那么将不成立；
    （2）若模板定义了<,但是Type是结构，那么不成立
    （3）若模板定义了*，但Type是数组，指针或结构，那么不成立。
    解决的方案：
    （1）重载运算符；
    （2）为特定的类型提供具体化的模板定义。
33. 显示具体化：具体化函数定义，当编译器找到与函数调用相匹配的具体化定义时将采用，而不用模板，
    一些规则总结： （1）对于给定的函数，可以有非模板函数，模板函数和显式具体化模板函数以及它们的重载版本。
                   （2）显示具体化的原型和定义都应该以template<>开头，并通过名称来指出类型。
                   （3）优先级： 非模板函数>具体化函数>常规模板函数
    template<> void swap<job>(job & a, job & b){} // or template<> void swap(job &a, job &b){}
34. 实例化和具体化：
    模板不会生成函数定义，它只是一个用于生成函数的定义的方案，编译器使用模板为特定类型生成函数定义时，得到的是模板实例
    (1)一般调用含有特定类型参数的模板函数时，是隐式实例化；
    (2)还可以显式实例化：申明所需的种类——用<>符号指示类型，并在声明前加上template：
       template void swap<int> (int, int); // 与显式具体化不同，就在于template后面有没有<>,而且显示式具体化是告诉编译器不用使用模板函数
35. 在同一个文件中使用相同类型的显式具体化和显式实例将出错。
36. 具体化和实例化的例子：
    template<class Type>
    void swap(Type &a, Type &b);
    template<> void swap<job>(job &a,job &b);
    int main()
    {
      template void swap<job>(job &, job &);
      short a,b;
      swap(a,b); // implicit template instantiation for short//隐式实例化
      job n,m;
      swap(n,m); // use explicit specialization for job //显式具体化
      char g,h;
      swap(g,h); // use explicit template instantiation for char;//显式实例化
      return 0;
    }
37. 重载解析：
   （1）创建候选函数列表，包含于被调用函数的名称相同的函数和模板函数
   （2）使用候选函数列表创建可行函数列表，都是参数数目正确的函数，有一个隐式转换序列，其中包括实参类型与相应的形参类型
        完全匹配的情况，例如float参数可以转换为double参数
   （3）确定是否有最佳的可行函数，如果有，则使用它，如果没有，则该函数调用出错
38. 函数匹配最佳到最差顺序：
    （1） 完全匹配，但常规函数优先于模板
    （2）提升转换，例如char和short自动转换为int,float自动转换为double
    （3）标准转换
    （4）用户定义的转换，如类声明中定义的转换
39. 最具体： 不一定意味着显式具体化，而是指编译器推断使用哪种类型时执行的转换最少。
40. 创建自定义选择：编写合适的函数调用，引导编译器做出希望的选择，如： cout<<lesser<>(m,n)<<endl;
41. 模板函数发展中遇到的问题：
    （1）是什么类型，如
       template<class Type1,class Type2>
       void ft(Type1 a, Type b )
       {
        c=a+b;  // what is the type of c 
       }
    （2）关键字decltype(c++11) C++11新增关键字decltype提供了解决方案，可这样使用该关键字：
       int x;
       decltype(x) y; // make y the same type as x; x可以是表达式。
    （3）使用auto来后置函数返回类型：
       template<class Type1,class Type2>
       auto ft(Type1 x, Type2 y)->decltype(x+y);
       {
        return x+y; 
       }
42. 头文件中可以放的东西：函数原型，使用#define或const定义的符号常量，结构声明，类声明，模板声明，内联函数。不要包含函数定义和变量定义。
43. 不要用#include来包含代码文件，这样将导致多重声明。
44. 为了防止多次包含同一个头文件，可以使用
    #ifndef 定义的名称
    #define 定义的名称
    #include<>
    ...
    #endif
    这样是编译器如果没有定义这么一个定义的名称，就会执行中间的内容，这种方法并不能防止编译器将文件包含两次，而是让他忽略除
    第一次包含以外的所有内容。
45. 存储持续性：
    （1）自动存储持续性：在函数定义中声明的变量，包括函数参数。
    （2）静态存储持续性：static定义的变量和在函数定义外定义的变量。
    （3）线程存储持续性：变量用thread_local声明。
    （4）动态存储持续性：new 运算符分配的内存。
46. 作用域和链接：
    （1）连接性为外部的变量（名称）可以在文件间共享，内部的只能在函数内部中共享，自动变量的名称没有连接性，所以不能共享
    （2）函数原型作用域中使用的名称只在包含参数列表的括号内可用，这就是为什么这些名称是什么以及是否出现都不是很重要
    （3）c++函数的作用域可以是整个类或是整个名称空间，但是不能是局部的（因为不能在代码块内定义函数，如果函数的作用域是局部
    的则只是对他自己可见，因此不能被其他函数调用）
    （4）5种变量存储方式
       存储描述              持续性          作用域           链接性           如何声明
       自动                   自动           代码块           无              在代码块中
      寄存器                  自动           代码块           无              在代码块中，使用关键字register
      静态，无链接性          静态           代码块           无              外部，使用关键字static
      静态，外部链接性        静态           文件             外部            不在任何函数内 
      静态，内部链接性        静态           文件             内部            不在任何函数内，使用关键词static;
    
47.单定义规则：两种变量声明， 一种是定义声明，为变量分配存储空间，一种是引用声明，不给变量分配存储空间，因为它引用已有的
   变量，使用关键字extern,且不进行初始化，否则声明为定义，导致分配存储空间。
   可以有多个变量同名，如不同函数中申明的同名变量。 而且局部变量可能隐藏同名的全局变量。
48.g
   
   
   
   
   
   
   
   
